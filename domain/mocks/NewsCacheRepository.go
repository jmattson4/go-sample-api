// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/jmattson4/go-sample-api/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewsCacheRepository is an autogenerated mock type for the NewsCacheRepository type
type NewsCacheRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: news
func (_m *NewsCacheRepository) Create(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: news
func (_m *NewsCacheRepository) Delete(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: news
func (_m *NewsCacheRepository) Get(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMultipleNews provides a mock function with given fields: start, count, news
func (_m *NewsCacheRepository) GetMultipleNews(start int, count int, news []*domain.NewsData) error {
	ret := _m.Called(start, count, news)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, []*domain.NewsData) error); ok {
		r0 = rf(start, count, news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: news
func (_m *NewsCacheRepository) Update(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
