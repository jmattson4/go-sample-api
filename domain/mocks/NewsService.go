// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/jmattson4/go-sample-api/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewsService is an autogenerated mock type for the NewsService type
type NewsService struct {
	mock.Mock
}

// Create provides a mock function with given fields: news
func (_m *NewsService) Create(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: news
func (_m *NewsService) Delete(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: news
func (_m *NewsService) Get(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByArticleLink provides a mock function with given fields: news
func (_m *NewsService) GetByArticleLink(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMultipleNews provides a mock function with given fields: start, count, news
func (_m *NewsService) GetMultipleNews(start int, count int, news []*domain.NewsData) error {
	ret := _m.Called(start, count, news)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, []*domain.NewsData) error); ok {
		r0 = rf(start, count, news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMultipleNewsByWebName provides a mock function with given fields: start, count, news, webName
func (_m *NewsService) GetMultipleNewsByWebName(start int, count int, news []*domain.NewsData, webName string) error {
	ret := _m.Called(start, count, news, webName)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, []*domain.NewsData, string) error); ok {
		r0 = rf(start, count, news, webName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNewsByWebNameAndID provides a mock function with given fields: news
func (_m *NewsService) GetNewsByWebNameAndID(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HardDelete provides a mock function with given fields: news
func (_m *NewsService) HardDelete(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessNewsData provides a mock function with given fields: processAmount, websiteName, articleLink, articleText, imageURL, paragraphs
func (_m *NewsService) ProcessNewsData(processAmount uint, websiteName string, articleLink []string, articleText []string, imageURL []string, paragraphs []string) error {
	ret := _m.Called(processAmount, websiteName, articleLink, articleText, imageURL, paragraphs)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, []string, []string, []string, []string) error); ok {
		r0 = rf(processAmount, websiteName, articleLink, articleText, imageURL, paragraphs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: news
func (_m *NewsService) Update(news *domain.NewsData) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.NewsData) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
