// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/jmattson4/go-sample-api/domain"
	mock "github.com/stretchr/testify/mock"
)

// AccountCacheRepo is an autogenerated mock type for the AccountCacheRepo type
type AccountCacheRepo struct {
	mock.Mock
}

// Construct provides a mock function with given fields: _a0
func (_m *AccountCacheRepo) Construct(_a0 interface{}) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Create provides a mock function with given fields: email, password
func (_m *AccountCacheRepo) Create(email string, password string) error {
	ret := _m.Called(email, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAuth provides a mock function with given fields: userid, td
func (_m *AccountCacheRepo) CreateAuth(userid uint, td *domain.TokenDetails) error {
	ret := _m.Called(userid, td)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *domain.TokenDetails) error); ok {
		r0 = rf(userid, td)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: accountID
func (_m *AccountCacheRepo) CreateToken(accountID uint) (*domain.TokenDetails, error) {
	ret := _m.Called(accountID)

	var r0 *domain.TokenDetails
	if rf, ok := ret.Get(0).(func(uint) *domain.TokenDetails); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TokenDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuth provides a mock function with given fields: givenUuid
func (_m *AccountCacheRepo) DeleteAuth(givenUuid string) (int64, error) {
	ret := _m.Called(givenUuid)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(givenUuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(givenUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: u
func (_m *AccountCacheRepo) GetAccount(u uint) *domain.Account {
	ret := _m.Called(u)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(uint) *domain.Account); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	return r0
}
